BUGS:
- la mise à jour du login ne fonctionne pas

Avancement du projet (4/12/13)
=> socle technique :
 - bases du DDD en place (VO, Entity, Aggregate)
 - tests unitaires à finaliser, mais la plupart en place
 - scenarios BDD en place (permet de décrire les scenarios et de creer le modele)
 - CQRS/Event sourcing quasi fini (manque la gestion des snapshots)
 - hibernate en place
 - tout est en synchrone pour le moment (commandes et events, ansi que maj bdd de lecture)

TODO (Tests) :
* creation d'un Memento à partir d'un Aggregate
* creation d'un Aggregate à partir d'un Memento
* rechargement d'un Aggregate à partir d'un Memento
* creation d'un Memento à partir d'un DomainEvent
* creation d'un DomainEvent à partir d'un Memento
* serialization d'un Memento sous forme texte
* de-serialization d'un Memento à partir de la forme texte
* EntityQUtil.applyEvents
/ PersistenceHandler.handle(*)


DDD :
Regles à retenir :
- Utilisation systématique de VO (Value Object) pour tous les attributs typés, afin de
  - valider les valeurs
  - typer plus fortement que "String"
- Les VO sont toujours imutables
- Toujours surcharger equals() et hashCode() sur les VO !
- Attention : les BO étant mutables, les utiliser dans les evts n'est pas tres sur. Les evts peuvent
  en effet etre envoyés sur un bus en asynchrone, et lorsqu'il sera pris en compte, le BO référencé
  peut avoir changé. Les Evts ne doivent transporter que des données immutables : des champs simples,
  un DTO, ou bien un memento
- Validation "fail fast" des objets (lors de la construction ou affectation, et pas apres coup par une méthode validate)
  - Les objets ne doivent donc jamais etre dans un état invalide
- La plupart des setters ne sont pas necessaires, les modifs se faisant dans des cas d'utilisation
  précis (nom de méthode explicite), c'est dans ces méthodes la que les controles de validité doivent etre faits
- dans un premier temps, les objets du domaine seront publics (exposés au reste de l'appli). A voir
  si c'est viable.
- afin de pouvoir persister les BO, il faut récupérer les états internes. Dans un premier
  temps, le pattern "memento" ne sera pas utilisé, et des getters sevront donc etre présent
  pour tous les attributs (meme internes) des BO. A voir si c'est viable.

REMARQUES d'implementation :
- les EVTs sont immutables et tres simples (collection de champs simples), il n'est donc pas
  necessaire de coder les getter, des champs public final suffisente
- Les DTOs sont un peu plus complexes (code de validation, et aussi code de conversion, ex :
  getFullName()) Il contiennement donc des getters.
- Les vues utilisent uniquement les version "Q" des objets metiers. Les BO de la partie Command
  peuvent donc rester privés

A EVALUER :
- Les Bounded Context correspondent a des sous domaines de l'application
  Chaque sous domaine peut potentiellement etre implémenté de facon différente
  (par ex CRUD pour un, CQRS pour les autres...). Voir comment faire communiquer un sous
  systeme CRUD avec le reste (quels evts generer)

PROBLEMES :
- Comment traiter le scenario suivant avec des commandes asynchrones :
  - commande de creation d'un User -> retours immédiat avant enregistrement dans la bdd de lecture
  - selection auto du nouveau user qui doit apparaitre dans la liste des users
  -> faut il faire evoluer l'etat de la commande (commande envoyée, traitée (traitement effectué),
     finalisée (bdd de lecture mise à jour)
  -> ou bien lorsque traitée, retourner id du nouvel agregat, puis dans la vue attendre que la bdd
     de lecture envoie un msg "nouveau user créé" avec le meme id ?

* Si l'evt ne correspond pas exactement au EntityQ, l'application de l'event ne fonctionne pas
  Il faut prévoir un systeme de mapping Event-EntityQ
- La partie Command est clean, mais la partie Query partage ses modeles entre la couche
  persistance et ihm. Cela simplifie grandement l'appli, il faudra voir a l'usage si
  c'est viable. On a donc "seulement" 2 versions des modeles : 1 pour Command, et 1 pour Query
- Actuellement la couche domaine utilise la couche app, c'est pas bon (ca devrait etre exclusivement
  dans l'autre sens)
- Les evts utilisent des DTO, mais est ce vraiment utile ? Cela rend plus complexe l'application
  (conversion necessaire), alors que les objets du domaine ne sont pas techniques et peuvent donc
  etre transportés. A voir pour les entités... En tout cas les VO au moins doivent pouvoir etre
  partagés

A FAIRE (URGENT) :
 * persistence du EventStore
 * implémenter qq filtres dans l'ecran users
 - ? créer des classes commande. Les mettre en tant que classes statiques dans le service ? (pour les retrouver facilement)
 - faut il ou non avoir des commandes asynchrones ?
   - unification des command et queries ?
   - conserver tout le contexte necessaire dans la commande (user, ...)
   - pouvoir lier la commande avec la r�ponse ult�rieure (UUID...)
   - pool de threads pour traiter les commandes et queries
   - notifier ensuite l'emetteur pour indiquer resultat dispo
 - controle des droits utilisateur pour l'execution de chaque commande ou query
 - controle de validit� des parametres de la commande : utilisation de Shiro "service:method:instance"
 - JMS + Camel ? (lier le EventBus avec JMS)




- Mise en place MVVM (http://martinfowler.com/eaaDev/PresentationModel.html)
  - ok : binding de base
  - ok : les props avancées : visible, enabled...

- Guava EventBus pour la navigation
  - ok : navigation explicite depuis un modele de vue
  - ok : evts applicatifs (sommaire...)

- Sécurité : intégration de Apache Chiro :
  http://shiro.apache.org/authentication-features.html
  - ok : intégration avec JPA
  - intégration avec un serveur LDAP à faire

UI :
- ok : ne pas utiliser un Navigator, mais faire la navigation a la main
- ok : d�couverte auto des classes "View" par Spring
- ok : gestion de la navigation par evt
- ok : shiro reste utilis�, mais indirectement (a la main sans passer par le ShiroNavigator)

*** Repository ***
- normalement les echanges avec le repo se font uniquement avec des objets m�tiers
- il doit doit donc faire la conversion en interne avec les types d'objets persist�s
- attention : dans CQRS, le repo fait partie de la partie 'lecture' de l'application et ne manipule donc pas des objets m�tiers

*** Event Sourcing ***
Generation des evts :
- execution d'une commande (un service adapter) :
  - r�cuperation de l'agregat concern� (normalement 1 seul doit etre modifi� par la commande)
  - appel � la m�thode m�tier sur l'agregat
  - cette m�thode ne modifie pas directement l'etat de l'agregat, mais retourne une liste d'evts qui chacun d�crivent une modification "m�tier"
  - cette liste d'evts est ensuite pass�e � l'eventStore qui se charge de :
    - appliquer les evts sur l'agregat
    - stocket les evts
    - propager les evts aux listeners

*** CQRS ***
- l'application est coup�e en 2 parties :
  - commandes : m�thodes qui modifient l'�tat de l'appli
    - service applicatif d�di�
    - objets metier
    - eventStore
  - queries : requetes en consultation
    - service applicatif d�di�
    - le service effectue les conversions entre les types "evt" et ceux du service (les utilisateurs du service
      doivent ne voir que des types de le couche "evt"
    - repo d�di�
    - manipule des pojos
    - ecoute l'eventStore pour se maintenir a jour


 * A l'init de la session utilisateur, un bus d�di� � l'utilisateur est cr��
 * les vues de ce user s'enregistrent sur ce bus
 * ce bus �coute et forwarde les evts envoy�s sur le bus principal
 => Il faut activer le scope session de Spring pour :
   * injection directe dans les vues du bus
   * init du bus a la creation de la session (enregistrement aupres du bus principal)

 (((
 - notification de la vue par le modele de vue :
   - le modele de vue peut ecouter les evts applicatifs et reagir
   - la vue associ�e doit se mettre � jour
   - ex : suppression d'une ligne dans un tableau en cours d'affichage : la ligne disparait automatiquement
 )))

 - TU Binding : il reste a controler le binding dans les tables

 - menu de navigation entre les vues :
   * propose les vues d�couvertes (plugins)
   - affiche un icone et un nom pour chaque vue
   - gestion des droits d'acces (acces au plugin en fonction de roles)

 - chaque module/ecran(?) doit contenir son fichier de langue

 (- int�gration LDAP)

 - module d'edition des Patients

 - mise en place CQRS + event sourcing
   http://www.jayway.com/2013/03/08/aggregates-event-sourcing-distilled/
   http://www.jayway.com/2013/06/20/dont-publish-domain-events-return-them/

 - module technique qui log les actions :
   - ecoute l'activit� (evts des autres modules) et log dans un fichier

 - refactoring :
   - v�rif hexagonal pattern ok
   - d�coupage en sous projets : 1 par module
   - d�coupage en sous projets : 1 par couche
   - donc m x c projets ?
   - systeme d'evts : comment faire pour que les evts d'un module par un autre ne necessitent pas l'import du module complet ?
     - sous projet a part contenant les evts => les evts ne doivent pas contenir d'objets m�tiers pour rendre la couche autonome

 - int�gration de Camel

==> Propagation des evts sur le bus
* l'application possede un bus global
* a chaque modif d'objet, un evt est envoy� sur le bus
* cet evt doit etre envoy� aux autres modules
* les ihm doivent �galement recevoir cet evt
* les ihm sont instanci�es a chaque session utilisateur
* il faut donc enregistrer chaque instance d'ihm sur le bus global
* afin de limiter les risques de leak, il est pr�f�rable de cr�er un bus de session
  puis d'enregistrer ce bus de session aupres du global, et ensuite d'enregistrer
  chaque ihm sur le bus de session
* cas du login : service->LoginEvent(GLOBALBUS)-->LocalDispatcher.handle->LoginEvent(LOCALBUS)-->MyUI.handle->login
* cas du logout : ok

=> Description de l'archi
* la couche business est celle qui contient le code m�tier important
* cette couche ne doit pas fuir vers les clients (ihm, autres modules...)
* les donn�es contenues dans ces objets doivent donc etre transport�es dans des DTO
* ces DTO sont echang�s entre les modules. Ils doivent donc etre le plus simple possible (pas de d�pendances techniques)
- ces DTO ne doivent pas faire ref aux objets m�tier (sinon pas possible de les echanger entre modules)
- le code de conversion objet m�tier - DTO doit donc necessairement etre dans objet metier
- les Id d'objets m�tier et de DTO sont communs (c'est ce qui permet de faire le lien)
- ces Ids sont typ� (par objet m�tier), mais comme ils doivent etre transport�s ils font partie de la couche DTO
* l'application est coup�e en 2 (CQRS) : Command et Query
* Command est la seule partie a acc�der � business
* business genere des evts lors des traitements
* ces evts transportent des donn�es sous forme de DTO (en aucun cas ne doivent contenir des refs vers les objets metiers)
* Command accede a un eventStore pour persister les evts g�n�r�s par business et retrouver un agregat par id
- Q : comment Command peut il effectuer des controles du type : login unique dans le store ?
  - d�velopper un repo sp�cial pour Command qui contienne uniquement les queries necessaires pour les controles (ex :
    rechercher les utilisateurs ayant le meme login)
  - ou bien simplement donner acces � Query depuis Command ?
* Command ne retourne pas de valeurs, mais notifie (envoi d'evts)
* Query manipule des DTO, et pas des objets m�tiers
* Query accede � un moyen de stockage (ex JPA), mais cela ne doit en aucun cas avoir un impact sur les DTO manipul�s
- IHM accede a la fois a Command et Query, ainsi qu'aux DTO (et events)
- Rq : dans l'impl�mentation actuelle, les objets persist�s par Query sont en fait les objets m�tier
  C'est une "bidouille" afin de gagner du temps. A voir pour la suite si c'est viable

=> Visibilit�
- application.event et application.model sont publics
- il faudrait pr�senter une interface pour les Service Command et Query
  afin que les modules puissent s'appeler les uns les autres

=> Communication entre applications
- Il se peut qu'on ait besoin d'appeler un module explicitement depuis un autre
- dans ce cas le module appelant doit poss�der une ref sur les classes publiques de l'appel�
- l'utilisation d'un bus JMS semble adapt� au transit des messages et evts
- envoi d'une commande sur le bus, traitement par module concern�, generation d'evts sur le
  bus, resultat de la commande envoy� sur le bus (code d'erreur, exception pour les commandes
  en modif, donn�es demand�es pour les queries)
- il faudra alors mettre en place une gestion asynchrone des commandes
- attention dans ce cas ce n'est pas le thread http qui effectue le traitement
  donc la session utilisateur n'est pas accessible normalement.
- tous les parametres necessaires au traitement doivent etre stock�s dans la commande
  par ex utilisateur connect�, car la session n'est plus dispo pendant traitement
- une fois la commande trait�e, il faut notifier l'appelant que le r�sultat est dispo
- le resultat est post� sur le bus global, mais il faut ensuite notifier le bus local
  a l'origine de l'appel -> comment le retrouver ?
